{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["drumPads","keyPress","drumName","drumColor","audioSrc","Display","props","react_default","a","createElement","id","drumPad","Author","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleClick","bind","assertThisInitialized","document","querySelector","style","display","className","onClick","React","Component","Modal","href","Record","_this2","pressRecord","handleMouseOver","handleMouseOut","onChange","getElementById","classList","remove","add","onMouseOver","onMouseOut","recordText","Play","_this3","state","playText","pressPlay","_this4","timeStamps","length","intervals","map","element","index","array","filter","intervalTotal","reduce","accumulator","currentValue","setState","setTimeout","soundArr","counter","delay","soundId","playAudio","onPlay","DrumPad","_this5","drumStyle","color","backgroundColor","transition","handleDrumPlay","event","letterKey","src","App","_this6","recordStop","handleDrumChange","handleRecordChange","handleKeyPress","drumPadPress","addEventListener","removeEventListener","audioElement","type","target","innerHTML","key","toUpperCase","drum","currentTime","play","parentElement","drumInfo","childNodes","fontSize","totalTime","push","Date","recordState","newTime","_this7","drumList","App_DrumPad","App_Record","App_Play","App_Author","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.379621c7.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\n\n// Array of drum pads used by the app\nconst drumPads = [\n  {\n    keyPress: \"Q\",\n    drumName: \"Heater 1\",\n    drumColor: \"255, 127, 80\",\n    audioSrc: \"https://s3.amazonaws.com/freecodecamp/drums/Heater-1.mp3\"\n  },\n  {\n    keyPress: \"W\",\n    drumName: \"Heater 2\",\n    drumColor: \"244, 196, 48\",\n    audioSrc: \"https://s3.amazonaws.com/freecodecamp/drums/Heater-2.mp3\"\n  },\n  {\n    keyPress: \"E\",\n    drumName: \"Heater 3\",\n    drumColor: \"23, 126, 137\",\n    audioSrc: \"https://s3.amazonaws.com/freecodecamp/drums/Heater-3.mp3\"\n  },\n  {\n    keyPress: \"A\",\n    drumName: \"Heater 4\",\n    drumColor: \"8, 76, 97\",\n    audioSrc: \"https://s3.amazonaws.com/freecodecamp/drums/Heater-4_1.mp3\"\n  },\n  {\n    keyPress: \"S\",\n    drumName: \"Heater 6\",\n    drumColor: \"219, 58, 52\",\n    audioSrc: \"https://s3.amazonaws.com/freecodecamp/drums/Heater-6.mp3\"\n  },\n  {\n    keyPress: \"D\",\n    drumName: \"Open HH\",\n    drumColor: \"187, 222, 240\",\n    audioSrc: \"https://s3.amazonaws.com/freecodecamp/drums/Dsc_Oh.mp3\"\n  },\n  {\n    keyPress: \"Z\",\n    drumName: \"Kick n' Hat\",\n    drumColor: \"0, 166, 166\",\n    audioSrc: \"https://s3.amazonaws.com/freecodecamp/drums/Kick_n_Hat.mp3\"\n  },\n  {\n    keyPress: \"X\",\n    drumName: \"Kick\",\n    drumColor: \"240, 135, 0\",\n    audioSrc: \"https://s3.amazonaws.com/freecodecamp/drums/RP4_KICK_1.mp3\"\n  },\n  {\n    keyPress: \"C\",\n    drumName: \"Closed HH\",\n    drumColor: \"73, 109, 219\",\n    audioSrc: \"https://s3.amazonaws.com/freecodecamp/drums/Cev_H2.mp3\"\n  }\n];\n\n// Displays drum pad being played\n// Drum pad name passed in via props\nfunction Display(props) {\n  return <div id=\"display\">{props.drumPad}</div>;\n}\n\nclass Author extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick() {\n    let modal = document.querySelector(\".modal\");\n\n    modal.style.display = \"block\";\n  }\n\n  render() {\n    return (\n      <div className=\"authorContainer\">\n        <span className=\"author\">Coded and designed by Dylan Hamada</span>\n        <span className=\"infoBtn\" onClick={this.handleClick}>\n          <i id=\"infoIcon\" className=\"fas fa-info-circle\" />\n        </span>\n      </div>\n    );\n  }\n}\n\nfunction Modal() {\n  function handleClose() {\n    document.querySelector(\".modal\").style.display = \"none\";\n  }\n\n  return (\n    <div className=\"modal\">\n      <div className=\"modalContent\">\n        <span className=\"closeBtn\" onClick={handleClose}>\n          &times;\n        </span>\n        <h1>Drum Machine App</h1>\n        <ul>\n          <li>\n            Click the buttons or press the corresponding key to play drum sounds\n          </li>\n          <li>\n            Click the Record button to begin recording your clicks or key\n            presses\n          </li>\n          <li>Click Play to hear your drum playing sequence</li>\n        </ul>\n        <p>\n          Background image courtesy of Hamed Daram on\n          <a href=\"https://unsplash.com/photos/-5fbmfaInwg\">Unsplash</a>\n        </p>\n      </div>\n    </div>\n  );\n}\n\n// Records sequence of drum clicks or presses and passes them to an array in App component state\nclass Record extends React.Component {\n  constructor(props) {\n    super(props);\n    this.pressRecord = this.pressRecord.bind(this);\n    this.handleMouseOver = this.handleMouseOver.bind(this);\n    this.handleMouseOut = this.handleMouseOut.bind(this);\n  }\n\n  pressRecord() {\n    this.props.onChange();\n  }\n\n  handleMouseOver() {\n    document.getElementById(\"recordButton\").classList.remove(\"hover-text-out\");\n    document.getElementById(\"recordButton\").classList.add(\"hover-text\");\n  }\n\n  handleMouseOut() {\n    document.getElementById(\"recordButton\").classList.remove(\"hover-text\");\n    document.getElementById(\"recordButton\").classList.add(\"hover-text-out\");\n  }\n\n  render() {\n    return (\n      <div\n        id=\"record\"\n        onClick={this.pressRecord}\n        onMouseOver={this.handleMouseOver}\n        onMouseOut={this.handleMouseOut}\n      >\n        <span id=\"recordButton\">{this.props.recordText}</span>\n      </div>\n    );\n  }\n}\n\n/* Plays back sequence of drum clicks or presses based on timeStamps \narray in App component state */\nclass Play extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      playText: \"Play\"\n    };\n    this.handleMouseOver = this.handleMouseOver.bind(this);\n    this.handleMouseOut = this.handleMouseOut.bind(this);\n    this.pressPlay = this.pressPlay.bind(this);\n  }\n\n  /* MouseOver and MouseOut event handlers */\n  handleMouseOver() {\n    document.getElementById(\"playButton\").classList.remove(\"hover-text-out\");\n    document.getElementById(\"playButton\").classList.add(\"hover-text\");\n  }\n\n  handleMouseOut() {\n    document.getElementById(\"playButton\").classList.remove(\"hover-text\");\n    document.getElementById(\"playButton\").classList.add(\"hover-text-out\");\n  }\n\n  pressPlay() {\n    if (\n      this.props.timeStamps[0].length > 0 &&\n      this.props.timeStamps[1].length > 0\n    ) {\n      let intervals = this.props.timeStamps[0]\n        .map((element, index, array) => element - array[index - 1])\n        .filter(element => element);\n\n      let intervalTotal = intervals.reduce(\n        (accumulator, currentValue) => accumulator + currentValue\n      );\n      this.setState({\n        playText: \"Playing\"\n      });\n      let textTimer = setTimeout(() => {\n        this.setState({\n          playText: \"Play\"\n        });\n      }, intervalTotal);\n\n      let soundArr = this.props.timeStamps[1];\n      let counter = 0;\n      let delay = intervals[counter];\n      let soundId = soundArr[counter];\n\n      // Uses a recursive function to sequence playback via setTimeout method\n      let playAudio = () => {\n        this.props.onPlay(soundId);\n        counter++;\n        delay = intervals[counter];\n        soundId = soundArr[counter];\n\n        if (delay && soundId) {\n          timerId = setTimeout(playAudio, delay);\n        }\n      };\n\n      let timerId = setTimeout(playAudio, delay);\n    }\n  }\n\n  render() {\n    return (\n      <div\n        id=\"play\"\n        onClick={this.pressPlay}\n        onMouseOver={this.handleMouseOver}\n        onMouseOut={this.handleMouseOut}\n      >\n        <span id=\"playButton\">{this.state.playText}</span>\n      </div>\n    );\n  }\n}\n\n// Displays an individual drum pad\nclass DrumPad extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      drumStyle: {\n        color: \"rgb(\" + this.props.drumColor + \")\",\n        backgroundColor: \"#f8f8f8\",\n        transition: \"all 0.3s\"\n      }\n    };\n    this.handleDrumPlay = this.handleDrumPlay.bind(this);\n    this.handleMouseOver = this.handleMouseOver.bind(this);\n    this.handleMouseOut = this.handleMouseOut.bind(this);\n  }\n\n  // Passes event data to the event handler passed in by App via props\n  handleDrumPlay(event) {\n    this.props.onChange(event);\n  }\n\n  handleMouseOver() {\n    this.setState({\n      drumStyle: {\n        color: \"#f8f8f8\",\n        backgroundColor: \"rgb(\" + this.props.drumColor + \")\",\n        transition: \"all 0.3s\"\n      }\n    });\n  }\n\n  handleMouseOut() {\n    this.setState({\n      drumStyle: {\n        color: \"rgb(\" + this.props.drumColor + \")\",\n        backgroundColor: \"#f8f8f8\",\n        transition: \"all 0.3s\"\n      }\n    });\n  }\n\n  render() {\n    return (\n      // Clicking this component triggers the event handler\n      <div\n        id={this.props.drumName}\n        className=\"drum-pad\"\n        onClick={this.handleDrumPlay}\n        onMouseOver={this.handleMouseOver}\n        onMouseOut={this.handleMouseOut}\n        style={this.state.drumStyle}\n      >\n        <div className=\"drumLetter\">{this.props.letterKey}</div>\n        <audio\n          id={this.props.letterKey}\n          className=\"clip\"\n          src={this.props.audioSrc}\n        />\n      </div>\n    );\n  }\n}\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      drumName: \"Drum Machine\",\n      recordStop: true,\n      recordText: \"Record\",\n      timeStamps: [[], []]\n    };\n    this.handleDrumChange = this.handleDrumChange.bind(this);\n    this.handleRecordChange = this.handleRecordChange.bind(this);\n    this.handleKeyPress = this.handleKeyPress.bind(this);\n    this.drumPadPress = this.drumPadPress.bind(this);\n  }\n\n  // When this component loads, a document-wide 'keydown' event handler is created that calls handleDrumChange()\n  componentDidMount() {\n    document.addEventListener(\"keydown\", this.handleKeyPress);\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener(\"keydown\", this.handleKeyPress);\n  }\n\n  /* Plays the child audio element of the DrumPad element being clicked,\n  or whose related key is being pressed, or the audio element being passed\n  by the Play component */\n  handleKeyPress(event) {\n    let audioElement;\n\n    /* Sets audioElement based on what component or function is calling\n    handleKeyPress */\n    if (event.type === \"click\") {\n      audioElement = document.getElementById(event.target.innerHTML);\n    } else if (event.type === \"keydown\") {\n      audioElement = document.getElementById(event.key.toUpperCase());\n    } else {\n      audioElement = document.getElementById(event);\n    }\n\n    if (audioElement) {\n      /* Filters the drumPad array for the element whose \"keyPress\" property\n      matches the id of audioElement, then passes the element to the\n      handleDrumChange function */\n      let drum = drumPads.filter(\n        drumPad => drumPad.keyPress === audioElement.id\n      );\n      this.handleDrumChange(drum);\n\n      /* Plays audioElement, and sets the \"currentTime\" property to 0 to\n      allow rapid playing of the element even before the previous play\n      has finished */\n      audioElement.currentTime = 0;\n      audioElement.play();\n\n      /* Calls the drumPadPress function to simulate a button press on the\n      parent DrumPad element of audioElement */\n      this.drumPadPress(audioElement.parentElement);\n    }\n  }\n\n  /* Changes a DrumPad element's style to simulate a visual \"push\" whenever \n  the element is clicked, the related key is pressed, or the child audio \n  element is played via the Play component functionality */\n  drumPadPress(element) {\n    /* Filters the drumPads array to find the relevant element,\n    so the drumColor property can be referenced */\n    let drumInfo = drumPads.filter(\n      drumPad => drumPad.keyPress === element.childNodes[1].id\n    )[0];\n\n    element.style.fontSize = \"1.5em\";\n    element.style.color = \"white\";\n    element.style.backgroundColor = \"rgb(\" + drumInfo.drumColor + \")\";\n    element.style.transition = \"all 0.05s\";\n\n    /* Visually simulates a button press by \"resetting\" the previously\n    set styles using a setTimeout method */\n    let timerId = setTimeout(() => {\n      element.style.fontSize = \"1em\";\n      element.style.color = \"rgb(\" + drumInfo.drumColor + \")\";\n      element.style.backgroundColor = \"#f8f8f8\";\n      element.style.transition = \"all 0.05s\";\n    }, 100);\n  }\n\n  handleDrumChange(drum) {\n    this.setState({\n      drumName: drum[0].drumName\n    });\n\n    // If Recording is on, clicking/pressing drums will push a new Date and drum id to timeStamps array\n    if (!this.state.recordStop) {\n      let totalTime = this.state.timeStamps;\n\n      totalTime[0].push(new Date());\n      totalTime[1].push(drum[0].keyPress);\n\n      this.setState({\n        timeStamps: totalTime\n      });\n    }\n  }\n\n  // Changes text of Record button and sets initial and final Date elements in timeStamp array, to be used to determine playing sequence for the Play component\n  handleRecordChange() {\n    let recordText;\n    let recordState = this.state.recordStop ? false : true;\n\n    if (this.state.recordStop) {\n      recordText = \"Stop\";\n    } else {\n      recordText = \"Record\";\n    }\n\n    if (this.state.recordStop) {\n      let newTime = [[new Date()], []];\n\n      this.setState({\n        timeStamps: newTime\n      });\n    } else {\n      let totalTime = this.state.timeStamps;\n      totalTime[0].push(new Date());\n\n      this.setState({\n        timeStamps: totalTime\n      });\n    }\n\n    this.setState({\n      recordStop: recordState,\n      recordText: recordText\n    });\n  }\n\n  render() {\n    // Generate a series of DrumPad components using the map method\n    const drumList = drumPads.map(drumPad => (\n      <DrumPad\n        key={drumPad.keyPress}\n        letterKey={drumPad.keyPress}\n        audioSrc={drumPad.audioSrc}\n        onChange={this.handleKeyPress}\n        drumName={drumPad.drumName}\n        drumColor={drumPad.drumColor}\n      />\n    ));\n\n    return (\n      <div id=\"drum-machine\">\n        <Display drumPad={this.state.drumName} />\n        {drumList}\n        <Record\n          onChange={this.handleRecordChange}\n          recordText={this.state.recordText}\n        />\n        <Play timeStamps={this.state.timeStamps} onPlay={this.handleKeyPress} />\n        <Author />\n        <Modal />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}