{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["drumPads","keyPress","drumName","audioSrc","Display","props","react_default","a","createElement","id","className","drumPad","Record","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","pressRecord","bind","assertThisInitialized","onChange","onClick","buttonText","React","Component","Play","_this2","pressPlay","DrumPad","_this3","handleDrumPlay","document","addEventListener","event","audioElement","type","getElementById","target","innerHTML","key","toUpperCase","drum","filter","currentTime","play","letterKey","src","App","_this4","state","recordStop","recordText","timeStamps","handleDrumChange","handleRecordChange","setState","totalTime","push","Date","recordState","buttonState","newTime","_this5","drumList","map","App_DrumPad","App_Record","recording","App_Play","Boolean","window","location","hostname","match","ReactDOM","render","src_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f03bb093.chunk.js","sourcesContent":["import React from \"react\";\n\n// Array of drum pads used by the app\nconst drumPads = [\n  {\n    keyPress: \"Q\",\n    drumName: \"Heater 1\",\n    audioSrc: \"https://s3.amazonaws.com/freecodecamp/drums/Heater-1.mp3\"\n  },\n  {\n    keyPress: \"W\",\n    drumName: \"Heater 2\",\n    audioSrc: \"https://s3.amazonaws.com/freecodecamp/drums/Heater-2.mp3\"\n  },\n  {\n    keyPress: \"E\",\n    drumName: \"Heater 3\",\n    audioSrc: \"https://s3.amazonaws.com/freecodecamp/drums/Heater-3.mp3\"\n  },\n  {\n    keyPress: \"A\",\n    drumName: \"Heater 4\",\n    audioSrc: \"https://s3.amazonaws.com/freecodecamp/drums/Heater-4_1.mp3\"\n  },\n  {\n    keyPress: \"S\",\n    drumName: \"Heater 6\",\n    audioSrc: \"https://s3.amazonaws.com/freecodecamp/drums/Heater-6.mp3\"\n  },\n  {\n    keyPress: \"D\",\n    drumName: \"Open HH\",\n    audioSrc: \"https://s3.amazonaws.com/freecodecamp/drums/Dsc_Oh.mp3\"\n  },\n  {\n    keyPress: \"Z\",\n    drumName: \"Kick n' Hat\",\n    audioSrc: \"https://s3.amazonaws.com/freecodecamp/drums/Kick_n_Hat.mp3\"\n  },\n  {\n    keyPress: \"X\",\n    drumName: \"Kick\",\n    audioSrc: \"https://s3.amazonaws.com/freecodecamp/drums/RP4_KICK_1.mp3\"\n  },\n  {\n    keyPress: \"C\",\n    drumName: \"Closed HH\",\n    audioSrc: \"https://s3.amazonaws.com/freecodecamp/drums/Cev_H2.mp3\"\n  }\n];\n\n// Displays drum pad being played\n// Drum pad name passed in via props\nfunction Display(props) {\n  return (\n    <div id=\"display\">\n      <h1 className=\"text-center\">{props.drumPad}</h1>\n    </div>\n  );\n}\n\n// Records sequence of drum clicks or presses and passes them to an array in App component state\nclass Record extends React.Component {\n  constructor(props) {\n    super(props);\n    this.pressRecord = this.pressRecord.bind(this);\n  }\n\n  pressRecord() {\n    this.props.onChange();\n  }\n\n  render() {\n    return (\n      <div>\n        <button className=\"btn btn-danger\" onClick={this.pressRecord}>\n          {this.props.buttonText}\n        </button>\n      </div>\n    );\n  }\n}\n\nclass Play extends React.Component {\n  constructor(props) {\n    super(props);\n    this.pressPlay = this.pressPlay.bind(this);\n  }\n\n  pressPlay() {}\n\n  render() {\n    return (\n      <div>\n        <button className=\"btn btn-info\" onClick={this.pressPlay}>\n          Play\n        </button>\n      </div>\n    );\n  }\n}\n\n// Displays an individual drum pad\nclass DrumPad extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleDrumPlay = this.handleDrumPlay.bind(this);\n  }\n\n  // When this component loads, a document-wide 'keydown' event handler is created that calls handleDrumChange()\n  componentDidMount() {\n    document.addEventListener(\"keydown\", this.handleDrumPlay);\n  }\n\n  // Passes event data to the event handler passed in by App via props\n  handleDrumPlay(event) {\n    let audioElement;\n\n    // Depending on the event triggered, the audio element is assigned to audioElement\n    if (event.type === \"click\") {\n      audioElement = document.getElementById(event.target.innerHTML);\n    } else {\n      audioElement = document.getElementById(event.key.toUpperCase());\n    }\n\n    if (audioElement) {\n      // Filters the drumPads array to find the element whose keyPress value matches the audio element's id\n      let drum = drumPads.filter(\n        drumPad => drumPad.keyPress === audioElement.id\n      );\n\n      // Allows rapid repeated plays of an individual audio element\n      audioElement.currentTime = 0;\n      audioElement.play();\n\n      // Call the onChange function passed in from the App component, passing the drum variable so App can update the Display component\n      this.props.onChange(drum);\n    }\n  }\n\n  render() {\n    return (\n      // Clicking this component triggers the event handler\n      <div className=\"drum-pad\" onClick={this.handleDrumPlay}>\n        <h1>{this.props.letterKey}</h1>\n        <audio\n          id={this.props.letterKey}\n          className=\"clip\"\n          src={this.props.audioSrc}\n        />\n      </div>\n    );\n  }\n}\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      drumName: \"Drum Name\",\n      recordStop: true,\n      recordText: \"Record\",\n      timeStamps: [[], []]\n    };\n    this.handleDrumChange = this.handleDrumChange.bind(this);\n    this.handleRecordChange = this.handleRecordChange.bind(this);\n  }\n\n  handleDrumChange(drum) {\n    this.setState({\n      drumName: drum[0].drumName\n    });\n\n    // If Record button pressed, clicking/pressing drums will push a new Date and drum id to timeStamps array\n    if (!this.state.recordStop) {\n      let totalTime = this.state.timeStamps;\n\n      totalTime[0].push(new Date());\n      totalTime[1].push(drum[0].keyPress);\n\n      this.setState({\n        timeStamps: totalTime\n      });\n    }\n  }\n\n  // Changes text of Record button and sets initial and final Date elements in timeStamp array, to be used to determine playing sequence for the Play component\n  handleRecordChange() {\n    let recordState = this.state.recordStop ? false : true;\n    let buttonState = this.state.recordText === \"Record\" ? \"Stop\" : \"Record\";\n\n    if (this.state.recordStop) {\n      let newTime = [[new Date()], []];\n\n      this.setState({\n        timeStamps: newTime\n      });\n    } else {\n      let totalTime = this.state.timeStamps;\n      totalTime[0].push(new Date());\n\n      this.setState({\n        timeStamps: totalTime\n      });\n    }\n\n    this.setState({\n      recordStop: recordState,\n      recordText: buttonState\n    });\n  }\n\n  render() {\n    // Generate a series of DrumPad components using the map method\n    const drumList = drumPads.map(drumPad => (\n      <DrumPad\n        key={drumPad.keyPress}\n        letterKey={drumPad.keyPress}\n        audioSrc={drumPad.audioSrc}\n        onChange={this.handleDrumChange}\n      />\n    ));\n\n    return (\n      <div id=\"drum-machine\" className=\"container bg-primary\">\n        <Display drumPad={this.state.drumName} />\n        {drumList}\n        <Record\n          onChange={this.handleRecordChange}\n          recording={this.state.recordStop}\n          buttonText={this.state.recordText}\n        />\n        <Play timeStamps={this.state.timeStamps} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}