{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["drumPads","keyPress","audioSrc","Display","props","react_default","a","createElement","id","className","drumPad","DrumPad","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleDrumPlay","bind","assertThisInitialized","event","document","getElementById","target","innerHTML","play","onChange","onClick","letterKey","src","React","Component","App","_this2","state","drumName","handleChange","setState","_this3","drumList","map","App_DrumPad","key","Boolean","window","location","hostname","match","ReactDOM","render","src_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8KAEMA,EAAW,CACf,CACEC,SAAU,IACVC,SAAU,mEAEZ,CACED,SAAU,IACVC,SAAU,mEAEZ,CACED,SAAU,IACVC,SAAU,mEAEZ,CACED,SAAU,IACVC,SAAU,mEAEZ,CACED,SAAU,IACVC,SAAU,mEAEZ,CACED,SAAU,IACVC,SAAU,mEAEZ,CACED,SAAU,IACVC,SAAU,mEAEZ,CACED,SAAU,IACVC,SAAU,mEAEZ,CACED,SAAU,IACVC,SAAU,oEAId,SAASC,EAAQC,GACf,OACEC,EAAAC,EAAAC,cAAA,OAAKC,GAAG,WACNH,EAAAC,EAAAC,cAAA,MAAIE,UAAU,eAAeL,EAAMM,cAKnCC,cACJ,SAAAA,EAAYP,GAAO,IAAAQ,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACjBC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMX,KACDe,eAAiBP,EAAKO,eAAeC,KAApBP,OAAAQ,EAAA,EAAAR,CAAAD,IAFLA,8EAKJU,GACMC,SAASC,eAAeF,EAAMG,OAAOC,WAC3CC,OACbZ,KAAKX,MAAMwB,SAASN,EAAMG,OAAOC,4CAIjC,OACErB,EAAAC,EAAAC,cAAA,OAAKE,UAAU,WAAWoB,QAASd,KAAKI,gBACtCd,EAAAC,EAAAC,cAAA,UAAKQ,KAAKX,MAAM0B,WAChBzB,EAAAC,EAAAC,cAAA,SACEC,GAAIO,KAAKX,MAAM0B,UACfrB,UAAU,OACVsB,IAAKhB,KAAKX,MAAMF,mBAnBJ8B,IAAMC,WA4DbC,cAjCb,SAAAA,EAAY9B,GAAO,IAAA+B,EAAA,OAAAtB,OAAAC,EAAA,EAAAD,CAAAE,KAAAmB,IACjBC,EAAAtB,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAqB,GAAAhB,KAAAH,KAAMX,KACDgC,MAAQ,CACXC,SAAU,YAEZF,EAAKG,aAAeH,EAAKG,aAAalB,KAAlBP,OAAAQ,EAAA,EAAAR,CAAAsB,IALHA,4EAQNE,GACXtB,KAAKwB,SAAS,CACZF,SAAUA,qCAIL,IAAAG,EAAAzB,KACD0B,EAAWzC,EAAS0C,IAAI,SAAAhC,GAAO,OACnCL,EAAAC,EAAAC,cAACoC,EAAD,CACEC,IAAKlC,EAAQT,SACb6B,UAAWpB,EAAQT,SACnBC,SAAUQ,EAAQR,SAClB0B,SAAUY,EAAKF,iBAInB,OACEjC,EAAAC,EAAAC,cAAA,OAAKC,GAAG,eAAeC,UAAU,wBAC/BJ,EAAAC,EAAAC,cAACJ,EAAD,CAASO,QAASK,KAAKqB,MAAMC,WAC5BI,UA5BST,IAAMC,WC/DJY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO9C,EAAAC,EAAAC,cAAC6C,EAAD,MAAS7B,SAASC,eAAe,SD4H3C,kBAAmB6B,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.308db3ac.chunk.js","sourcesContent":["import React from \"react\";\n\nconst drumPads = [\n  {\n    keyPress: \"Q\",\n    audioSrc: \"https://actions.google.com/sounds/v1/cartoon/punchline_drum.ogg\"\n  },\n  {\n    keyPress: \"W\",\n    audioSrc: \"https://actions.google.com/sounds/v1/cartoon/punchline_drum.ogg\"\n  },\n  {\n    keyPress: \"E\",\n    audioSrc: \"https://actions.google.com/sounds/v1/cartoon/punchline_drum.ogg\"\n  },\n  {\n    keyPress: \"A\",\n    audioSrc: \"https://actions.google.com/sounds/v1/cartoon/punchline_drum.ogg\"\n  },\n  {\n    keyPress: \"S\",\n    audioSrc: \"https://actions.google.com/sounds/v1/cartoon/punchline_drum.ogg\"\n  },\n  {\n    keyPress: \"D\",\n    audioSrc: \"https://actions.google.com/sounds/v1/cartoon/punchline_drum.ogg\"\n  },\n  {\n    keyPress: \"Z\",\n    audioSrc: \"https://actions.google.com/sounds/v1/cartoon/punchline_drum.ogg\"\n  },\n  {\n    keyPress: \"X\",\n    audioSrc: \"https://actions.google.com/sounds/v1/cartoon/punchline_drum.ogg\"\n  },\n  {\n    keyPress: \"C\",\n    audioSrc: \"https://actions.google.com/sounds/v1/cartoon/punchline_drum.ogg\"\n  }\n];\n\nfunction Display(props) {\n  return (\n    <div id=\"display\">\n      <h1 className=\"text-center\">{props.drumPad}</h1>\n    </div>\n  );\n}\n\nclass DrumPad extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleDrumPlay = this.handleDrumPlay.bind(this);\n  }\n\n  handleDrumPlay(event) {\n    let audioElement = document.getElementById(event.target.innerHTML);\n    audioElement.play();\n    this.props.onChange(event.target.innerHTML);\n  }\n\n  render() {\n    return (\n      <div className=\"drum-pad\" onClick={this.handleDrumPlay}>\n        <h1>{this.props.letterKey}</h1>\n        <audio\n          id={this.props.letterKey}\n          className=\"clip\"\n          src={this.props.audioSrc}\n        />\n      </div>\n    );\n  }\n}\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      drumName: \"High Hat\"\n    };\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(drumName) {\n    this.setState({\n      drumName: drumName\n    });\n  }\n\n  render() {\n    const drumList = drumPads.map(drumPad => (\n      <DrumPad\n        key={drumPad.keyPress}\n        letterKey={drumPad.keyPress}\n        audioSrc={drumPad.audioSrc}\n        onChange={this.handleChange}\n      />\n    ));\n\n    return (\n      <div id=\"drum-machine\" className=\"container bg-primary\">\n        <Display drumPad={this.state.drumName} />\n        {drumList}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}