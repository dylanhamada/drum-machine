{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["drumPads","keyPress","drumName","drumColor","audioSrc","Display","props","react_default","a","createElement","id","drumPad","Record","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","pressRecord","bind","assertThisInitialized","onChange","onClick","buttonText","React","Component","Play","_this2","pressPlay","timeStamps","length","intervals","map","element","index","array","filter","soundArr","counter","delay","soundId","setTimeout","playAudio","document","getElementById","currentTime","play","DrumPad","_this3","state","drumStyle","color","handleDrumPlay","handleMouseOver","handleMouseOut","event","audioElement","target","lastChild","drum","setState","backgroundColor","className","onMouseOver","onMouseOut","style","letterKey","src","App","_this4","recordStop","recordText","handleDrumChange","handleRecordChange","handleKeyPress","addEventListener","key","toUpperCase","totalTime","push","Date","recordState","buttonState","newTime","_this5","drumList","App_DrumPad","App_Record","recording","App_Play","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5811ed74.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\n\n// Array of drum pads used by the app\nconst drumPads = [\n  {\n    keyPress: \"Q\",\n    drumName: \"Heater 1\",\n    drumColor: \"255, 127, 80\",\n    audioSrc: \"https://s3.amazonaws.com/freecodecamp/drums/Heater-1.mp3\"\n  },\n  {\n    keyPress: \"W\",\n    drumName: \"Heater 2\",\n    drumColor: \"244, 196, 48\",\n    audioSrc: \"https://s3.amazonaws.com/freecodecamp/drums/Heater-2.mp3\"\n  },\n  {\n    keyPress: \"E\",\n    drumName: \"Heater 3\",\n    drumColor: \"23, 126, 137\",\n    audioSrc: \"https://s3.amazonaws.com/freecodecamp/drums/Heater-3.mp3\"\n  },\n  {\n    keyPress: \"A\",\n    drumName: \"Heater 4\",\n    drumColor: \"8, 76, 97\",\n    audioSrc: \"https://s3.amazonaws.com/freecodecamp/drums/Heater-4_1.mp3\"\n  },\n  {\n    keyPress: \"S\",\n    drumName: \"Heater 6\",\n    drumColor: \"219, 58, 52\",\n    audioSrc: \"https://s3.amazonaws.com/freecodecamp/drums/Heater-6.mp3\"\n  },\n  {\n    keyPress: \"D\",\n    drumName: \"Open HH\",\n    drumColor: \"187, 222, 240\",\n    audioSrc: \"https://s3.amazonaws.com/freecodecamp/drums/Dsc_Oh.mp3\"\n  },\n  {\n    keyPress: \"Z\",\n    drumName: \"Kick n' Hat\",\n    drumColor: \"0, 166, 166\",\n    audioSrc: \"https://s3.amazonaws.com/freecodecamp/drums/Kick_n_Hat.mp3\"\n  },\n  {\n    keyPress: \"X\",\n    drumName: \"Kick\",\n    drumColor: \"240, 135, 0\",\n    audioSrc: \"https://s3.amazonaws.com/freecodecamp/drums/RP4_KICK_1.mp3\"\n  },\n  {\n    keyPress: \"C\",\n    drumName: \"Closed HH\",\n    drumColor: \"73, 109, 219\",\n    audioSrc: \"https://s3.amazonaws.com/freecodecamp/drums/Cev_H2.mp3\"\n  }\n];\n\n// Displays drum pad being played\n// Drum pad name passed in via props\nfunction Display(props) {\n  return <div id=\"display\">{props.drumPad}</div>;\n}\n\n// Records sequence of drum clicks or presses and passes them to an array in App component state\nclass Record extends React.Component {\n  constructor(props) {\n    super(props);\n    this.pressRecord = this.pressRecord.bind(this);\n  }\n\n  pressRecord() {\n    this.props.onChange();\n  }\n\n  render() {\n    return (\n      <div id=\"record\" onClick={this.pressRecord}>\n        {this.props.buttonText}\n      </div>\n    );\n  }\n}\n\n// Plays back sequence of drum clicks or presses based on timeStamps array in App component state\nclass Play extends React.Component {\n  constructor(props) {\n    super(props);\n    this.pressPlay = this.pressPlay.bind(this);\n  }\n\n  pressPlay() {\n    if (this.props.timeStamps[0].length > 0) {\n      let intervals = this.props.timeStamps[0]\n        .map((element, index, array) => element - array[index - 1])\n        .filter(element => element);\n\n      let soundArr = this.props.timeStamps[1];\n      let counter = 0;\n      let delay = intervals[counter];\n      let soundId = soundArr[counter];\n\n      // Uses a recursive function to sequence playback via setTimeout method\n      let timerId = setTimeout(function playAudio() {\n        document.getElementById(soundId).currentTime = 0;\n        document.getElementById(soundId).play();\n        counter++;\n        delay = intervals[counter];\n        soundId = soundArr[counter];\n\n        if (delay && soundId) {\n          timerId = setTimeout(playAudio, delay);\n        }\n      }, delay);\n    }\n  }\n\n  render() {\n    return (\n      <div id=\"play\" onClick={this.pressPlay}>\n        Play\n      </div>\n    );\n  }\n}\n\n// Displays an individual drum pad\nclass DrumPad extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      drumStyle: {\n        color: \"rgb(\" + this.props.drumColor + \")\"\n      }\n    };\n    this.handleDrumPlay = this.handleDrumPlay.bind(this);\n    this.handleMouseOver = this.handleMouseOver.bind(this);\n    this.handleMouseOut = this.handleMouseOut.bind(this);\n  }\n\n  // Passes event data to the event handler passed in by App via props\n  handleDrumPlay(event) {\n    let audioElement;\n\n    audioElement = event.target.lastChild;\n\n    if (audioElement) {\n      // Filters the drumPads array to find the element whose keyPress value matches the audio element's id\n      let drum = drumPads.filter(\n        drumPad => drumPad.keyPress === audioElement.id\n      );\n\n      // Allows rapid repeated plays of an individual audio element\n      audioElement.currentTime = 0;\n      audioElement.play();\n\n      // Call the onChange function passed in from the App component, passing the drum variable so App can update the Display component\n      this.props.onChange(drum);\n    }\n  }\n\n  handleMouseOver() {\n    this.setState({\n      drumStyle: {\n        color: \"white\",\n        backgroundColor: \"rgb(\" + this.props.drumColor + \")\"\n      }\n    });\n  }\n\n  handleMouseOut() {\n    this.setState({\n      drumStyle: {\n        color: \"rgb(\" + this.props.drumColor + \")\",\n        backgroundColor: \"#f8f8f8\"\n      }\n    });\n  }\n\n  render() {\n    return (\n      // Clicking this component triggers the event handler\n      <div\n        id={this.props.drumName}\n        className=\"drum-pad\"\n        onClick={this.handleDrumPlay}\n        onMouseOver={this.handleMouseOver}\n        onMouseOut={this.handleMouseOut}\n        style={this.state.drumStyle}\n      >\n        {this.props.letterKey}\n        <audio\n          id={this.props.letterKey}\n          className=\"clip\"\n          src={this.props.audioSrc}\n        />\n      </div>\n    );\n  }\n}\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      drumName: \"Drum Name\",\n      recordStop: true,\n      recordText: \"Record\",\n      timeStamps: [[], []]\n    };\n    this.handleDrumChange = this.handleDrumChange.bind(this);\n    this.handleRecordChange = this.handleRecordChange.bind(this);\n    this.handleKeyPress = this.handleKeyPress.bind(this);\n  }\n\n  // When this component loads, a document-wide 'keydown' event handler is created that calls handleDrumChange()\n  componentDidMount() {\n    document.addEventListener(\"keydown\", this.handleKeyPress);\n  }\n\n  handleKeyPress(event) {\n    let audioElement;\n    audioElement = document.getElementById(event.key.toUpperCase());\n\n    if (audioElement) {\n      let drum = drumPads.filter(\n        drumPad => drumPad.keyPress === audioElement.id\n      );\n\n      audioElement.currentTime = 0;\n      audioElement.play();\n\n      this.handleDrumChange(drum);\n    }\n  }\n\n  handleDrumChange(drum) {\n    this.setState({\n      drumName: drum[0].drumName\n    });\n\n    // If Recording is on, clicking/pressing drums will push a new Date and drum id to timeStamps array\n    if (!this.state.recordStop) {\n      let totalTime = this.state.timeStamps;\n\n      totalTime[0].push(new Date());\n      totalTime[1].push(drum[0].keyPress);\n\n      this.setState({\n        timeStamps: totalTime\n      });\n    }\n  }\n\n  // Changes text of Record button and sets initial and final Date elements in timeStamp array, to be used to determine playing sequence for the Play component\n  handleRecordChange() {\n    let recordState = this.state.recordStop ? false : true;\n    let buttonState = this.state.recordText === \"Record\" ? \"Stop\" : \"Record\";\n\n    if (this.state.recordStop) {\n      let newTime = [[new Date()], []];\n\n      this.setState({\n        timeStamps: newTime\n      });\n    } else {\n      let totalTime = this.state.timeStamps;\n      totalTime[0].push(new Date());\n\n      this.setState({\n        timeStamps: totalTime\n      });\n    }\n\n    this.setState({\n      recordStop: recordState,\n      recordText: buttonState\n    });\n  }\n\n  render() {\n    // Generate a series of DrumPad components using the map method\n    const drumList = drumPads.map(drumPad => (\n      <DrumPad\n        key={drumPad.keyPress}\n        letterKey={drumPad.keyPress}\n        audioSrc={drumPad.audioSrc}\n        onChange={this.handleDrumChange}\n        drumName={drumPad.drumName}\n        drumColor={drumPad.drumColor}\n      />\n    ));\n\n    return (\n      <div id=\"drum-machine\">\n        <Display drumPad={this.state.drumName} />\n        {drumList}\n        <Record\n          onChange={this.handleRecordChange}\n          recording={this.state.recordStop}\n          buttonText={this.state.recordText}\n        />\n        <Play timeStamps={this.state.timeStamps} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}