{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["drumPads","keyPress","drumName","drumColor","audioSrc","Display","props","react_default","a","createElement","id","drumPad","Author","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleClick","bind","assertThisInitialized","document","querySelector","style","display","className","onClick","React","Component","Modal","href","target","Record","_this2","pressRecord","handleMouseOver","handleMouseOut","onChange","getElementById","classList","remove","add","onMouseOver","onMouseOut","recordText","Play","_this3","state","playText","pressPlay","_this4","timeStamps","length","intervals","map","element","index","array","filter","intervalTotal","reduce","accumulator","currentValue","setState","setTimeout","soundArr","counter","delay","soundId","playAudio","onPlay","DrumPad","_this5","drumStyle","color","backgroundColor","transition","handleDrumPlay","event","letterKey","src","App","_this6","recordStop","handleDrumChange","handleRecordChange","handleKeyPress","drumPadPress","addEventListener","removeEventListener","audioElement","type","innerHTML","key","toUpperCase","drum","currentTime","play","parentElement","drumInfo","childNodes","fontSize","totalTime","push","Date","recordState","newTime","_this7","drumList","App_DrumPad","App_Record","App_Play","App_Author","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.12f57a97.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\n\n/* Array of drum pad objects to be passed into various components,\nand which include the corresponding key, drum name, drum color, and\naudio source */\nconst drumPads = [\n  {\n    keyPress: \"Q\",\n    drumName: \"Heater 1\",\n    drumColor: \"255, 127, 80\",\n    audioSrc: \"https://s3.amazonaws.com/freecodecamp/drums/Heater-1.mp3\"\n  },\n  {\n    keyPress: \"W\",\n    drumName: \"Heater 2\",\n    drumColor: \"244, 196, 48\",\n    audioSrc: \"https://s3.amazonaws.com/freecodecamp/drums/Heater-2.mp3\"\n  },\n  {\n    keyPress: \"E\",\n    drumName: \"Heater 3\",\n    drumColor: \"23, 126, 137\",\n    audioSrc: \"https://s3.amazonaws.com/freecodecamp/drums/Heater-3.mp3\"\n  },\n  {\n    keyPress: \"A\",\n    drumName: \"Heater 4\",\n    drumColor: \"8, 76, 97\",\n    audioSrc: \"https://s3.amazonaws.com/freecodecamp/drums/Heater-4_1.mp3\"\n  },\n  {\n    keyPress: \"S\",\n    drumName: \"Heater 6\",\n    drumColor: \"219, 58, 52\",\n    audioSrc: \"https://s3.amazonaws.com/freecodecamp/drums/Heater-6.mp3\"\n  },\n  {\n    keyPress: \"D\",\n    drumName: \"Open HH\",\n    drumColor: \"187, 222, 240\",\n    audioSrc: \"https://s3.amazonaws.com/freecodecamp/drums/Dsc_Oh.mp3\"\n  },\n  {\n    keyPress: \"Z\",\n    drumName: \"Kick n' Hat\",\n    drumColor: \"0, 166, 166\",\n    audioSrc: \"https://s3.amazonaws.com/freecodecamp/drums/Kick_n_Hat.mp3\"\n  },\n  {\n    keyPress: \"X\",\n    drumName: \"Kick\",\n    drumColor: \"240, 135, 0\",\n    audioSrc: \"https://s3.amazonaws.com/freecodecamp/drums/RP4_KICK_1.mp3\"\n  },\n  {\n    keyPress: \"C\",\n    drumName: \"Closed HH\",\n    drumColor: \"73, 109, 219\",\n    audioSrc: \"https://s3.amazonaws.com/freecodecamp/drums/Cev_H2.mp3\"\n  }\n];\n\n/* Displays the name of the drum pad being played, using props passed in\nvia the App component */\nfunction Display(props) {\n  return <div id=\"display\">{props.drumPad}</div>;\n}\n\n/* Displays app author as well as an info button that displays the Modal\ncomponent, which contains further information about the app */\nclass Author extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick() {\n    document.querySelector(\".modal\").style.display = \"block\";\n  }\n\n  render() {\n    return (\n      <div className=\"authorContainer\">\n        <span className=\"author\">Coded and designed by Dylan Hamada</span>\n        <span className=\"infoBtn\" onClick={this.handleClick}>\n          <i id=\"infoIcon\" className=\"fas fa-info-circle\" />\n        </span>\n      </div>\n    );\n  }\n}\n\n/* Modal component that displays further info about the app, including\ninstructions and any media credit */\nfunction Modal() {\n  /* Sets the CSS display value of the component to 'none' when the \n  'x' button is clicked */\n  function handleClose() {\n    document.querySelector(\".modal\").style.display = \"none\";\n  }\n\n  return (\n    <div className=\"modal\">\n      <div className=\"modalContent\">\n        <span className=\"closeBtn\" onClick={handleClose}>\n          &times;\n        </span>\n        <h1 className=\"appName\">Drum Machine App</h1>\n        <h4 className=\"appDesc\">\n          A FreeCodeCamp Front End Development Project built with React\n        </h4>\n        <h4 className=\"instructions\">Instructions:</h4>\n        <ul>\n          <li>\n            Click the buttons or press the corresponding key to play drum sounds\n          </li>\n          <li>\n            Click the Record button to begin recording your clicks or key\n            presses, then click Stop to finish recording\n          </li>\n          <li>Click Play to hear your drum-playing sequence</li>\n        </ul>\n        <p>\n          Background image courtesy of Hamed Daram on{\" \"}\n          <a href=\"https://unsplash.com/photos/-5fbmfaInwg\" target=\"_blank\">\n            Unsplash\n          </a>\n        </p>\n      </div>\n    </div>\n  );\n}\n\n/* Toggles the recordStop property in App state that permits state to \nbegin tracking drumPad clicks and key presses and add them to the\ntimeStamps array */\nclass Record extends React.Component {\n  constructor(props) {\n    super(props);\n    this.pressRecord = this.pressRecord.bind(this);\n    this.handleMouseOver = this.handleMouseOver.bind(this);\n    this.handleMouseOut = this.handleMouseOut.bind(this);\n  }\n\n  pressRecord() {\n    this.props.onChange();\n  }\n\n  /* MouseOver and MouseOut event handlers to change the recordButton's style */\n  handleMouseOver() {\n    document.getElementById(\"recordButton\").classList.remove(\"hover-text-out\");\n    document.getElementById(\"recordButton\").classList.add(\"hover-text\");\n  }\n\n  handleMouseOut() {\n    document.getElementById(\"recordButton\").classList.remove(\"hover-text\");\n    document.getElementById(\"recordButton\").classList.add(\"hover-text-out\");\n  }\n\n  render() {\n    return (\n      <div\n        id=\"record\"\n        onClick={this.pressRecord}\n        onMouseOver={this.handleMouseOver}\n        onMouseOut={this.handleMouseOut}\n      >\n        <span id=\"recordButton\">{this.props.recordText}</span>\n      </div>\n    );\n  }\n}\n\n/* Plays back sequence of drum clicks or presses based on timeStamps \narray in App component state */\nclass Play extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      playText: \"Play\"\n    };\n    this.handleMouseOver = this.handleMouseOver.bind(this);\n    this.handleMouseOut = this.handleMouseOut.bind(this);\n    this.pressPlay = this.pressPlay.bind(this);\n  }\n\n  /* MouseOver and MouseOut event handlers */\n  handleMouseOver() {\n    document.getElementById(\"playButton\").classList.remove(\"hover-text-out\");\n    document.getElementById(\"playButton\").classList.add(\"hover-text\");\n  }\n\n  handleMouseOut() {\n    document.getElementById(\"playButton\").classList.remove(\"hover-text\");\n    document.getElementById(\"playButton\").classList.add(\"hover-text-out\");\n  }\n\n  /* Iterates through the timeStamps object passed in via the App component,\n  which contains time stamps and drum pad ids as recorded by the user;\n  It then calculates the time intervals between these time stamps, and\n  recursively calls the onPlay function passed in via App, using the \n  drumpad ids as arguments */\n  pressPlay() {\n    /* Only fires if the timeStamps object is not empty, ie. it won't\n    execute if the user has not recorded any sequences yet */\n    if (\n      this.props.timeStamps[0].length > 0 &&\n      this.props.timeStamps[1].length > 0\n    ) {\n      /* Calculates the intervals between time stamps */\n      let intervals = this.props.timeStamps[0]\n        .map((element, index, array) => element - array[index - 1])\n        .filter(element => element);\n\n      /* Changes the text of the playButton span to 'Playing' while the\n      sequence is playing, then changes it back to 'Play' */\n      let intervalTotal = intervals.reduce(\n        (accumulator, currentValue) => accumulator + currentValue\n      );\n      this.setState({\n        playText: \"Playing\"\n      });\n      let textTimer = setTimeout(() => {\n        this.setState({\n          playText: \"Play\"\n        });\n      }, intervalTotal);\n\n      /* Initializes a counter to iterate through the timeStamps object */\n      let soundArr = this.props.timeStamps[1];\n      let counter = 0;\n      let delay = intervals[counter];\n      let soundId = soundArr[counter];\n\n      /* Recursive function that calls itself based on the calculated\n      intervals between time stamps */\n      let playAudio = () => {\n        this.props.onPlay(soundId);\n        counter++;\n        delay = intervals[counter];\n        soundId = soundArr[counter];\n\n        if (delay && soundId) {\n          timerId = setTimeout(playAudio, delay);\n        }\n      };\n\n      let timerId = setTimeout(playAudio, delay);\n    }\n  }\n\n  render() {\n    return (\n      <div\n        id=\"play\"\n        onClick={this.pressPlay}\n        onMouseOver={this.handleMouseOver}\n        onMouseOut={this.handleMouseOut}\n      >\n        <span id=\"playButton\">{this.state.playText}</span>\n      </div>\n    );\n  }\n}\n\n/* Individual drum pad elements that use elements passed in from the\ndrumPads array for styling */\nclass DrumPad extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      drumStyle: {\n        color: \"rgb(\" + this.props.drumColor + \")\",\n        backgroundColor: \"#f8f8f8\",\n        transition: \"all 0.3s\"\n      }\n    };\n    this.handleDrumPlay = this.handleDrumPlay.bind(this);\n    this.handleMouseOver = this.handleMouseOver.bind(this);\n    this.handleMouseOut = this.handleMouseOut.bind(this);\n  }\n\n  /* Passes event data to the handleKeyPress function passed in via the\n  App component, which plays the corresponding audio element */\n  handleDrumPlay(event) {\n    this.props.onChange(event);\n  }\n\n  /* MouseOver and MouseOut event handlers to change the styles of the\n  component */\n  handleMouseOver() {\n    this.setState({\n      drumStyle: {\n        color: \"#f8f8f8\",\n        backgroundColor: \"rgb(\" + this.props.drumColor + \")\",\n        transition: \"all 0.3s\"\n      }\n    });\n  }\n\n  handleMouseOut() {\n    this.setState({\n      drumStyle: {\n        color: \"rgb(\" + this.props.drumColor + \")\",\n        backgroundColor: \"#f8f8f8\",\n        transition: \"all 0.3s\"\n      }\n    });\n  }\n\n  render() {\n    return (\n      <div\n        id={this.props.drumName}\n        className=\"drum-pad\"\n        onClick={this.handleDrumPlay}\n        onMouseOver={this.handleMouseOver}\n        onMouseOut={this.handleMouseOut}\n        style={this.state.drumStyle}\n      >\n        <div className=\"drumLetter\">{this.props.letterKey}</div>\n        <audio\n          id={this.props.letterKey}\n          className=\"clip\"\n          src={this.props.audioSrc}\n        />\n      </div>\n    );\n  }\n}\n\n/* The main component that amalgamates all other components */\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      drumName: \"Drum Machine\",\n      recordStop: true,\n      recordText: \"Record\",\n      timeStamps: [[], []]\n    };\n    this.handleDrumChange = this.handleDrumChange.bind(this);\n    this.handleRecordChange = this.handleRecordChange.bind(this);\n    this.handleKeyPress = this.handleKeyPress.bind(this);\n    this.drumPadPress = this.drumPadPress.bind(this);\n  }\n\n  /* Document-wide event handler that listens for key presses, and calls the\n  handleKeyPress function to play the corresponding audio file if one of\n  the specified keys is pressed */\n  componentDidMount() {\n    document.addEventListener(\"keydown\", this.handleKeyPress);\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener(\"keydown\", this.handleKeyPress);\n  }\n\n  /* Plays the child audio element of the DrumPad element being clicked,\n  or whose related key is being pressed, or the audio element being passed\n  by the Play component */\n  handleKeyPress(event) {\n    let audioElement;\n\n    /* Sets audioElement based on what component or function is calling\n    handleKeyPress */\n    if (event.type === \"click\") {\n      audioElement = document.getElementById(event.target.innerHTML);\n    } else if (event.type === \"keydown\") {\n      audioElement = document.getElementById(event.key.toUpperCase());\n    } else {\n      audioElement = document.getElementById(event);\n    }\n\n    if (audioElement) {\n      /* Filters the drumPad array for the element whose \"keyPress\" property\n      matches the id of audioElement, then passes the element to the\n      handleDrumChange function */\n      let drum = drumPads.filter(\n        drumPad => drumPad.keyPress === audioElement.id\n      );\n      this.handleDrumChange(drum);\n\n      /* Plays audioElement, and sets the \"currentTime\" property to 0 to\n      allow rapid playing of the element even before the previous play\n      has finished */\n      audioElement.currentTime = 0;\n      audioElement.play();\n\n      /* Calls the drumPadPress function to simulate a button press on the\n      parent DrumPad element of audioElement */\n      this.drumPadPress(audioElement.parentElement);\n    }\n  }\n\n  /* Changes a DrumPad element's style to simulate a visual \"push\" whenever \n  the element is clicked, the related key is pressed, or the child audio \n  element is played via the Play component functionality */\n  drumPadPress(element) {\n    /* Filters the drumPads array to find the relevant element,\n    so the drumColor property can be referenced */\n    let drumInfo = drumPads.filter(\n      drumPad => drumPad.keyPress === element.childNodes[1].id\n    )[0];\n\n    element.style.fontSize = \"1.5em\";\n    element.style.color = \"white\";\n    element.style.backgroundColor = \"rgb(\" + drumInfo.drumColor + \")\";\n    element.style.transition = \"all 0.05s\";\n\n    /* Visually simulates a button press by \"resetting\" the previously\n    set styles using a setTimeout method */\n    let timerId = setTimeout(() => {\n      element.style.fontSize = \"1em\";\n      element.style.color = \"rgb(\" + drumInfo.drumColor + \")\";\n      element.style.backgroundColor = \"#f8f8f8\";\n      element.style.transition = \"all 0.05s\";\n    }, 100);\n  }\n\n  /* Updates the drum name in App state, and updates the timeStamps object\n  in App state with a new timestamp and drum id when the user presses a\n  relevant key or clicks a DrumPad element */\n  handleDrumChange(drum) {\n    this.setState({\n      drumName: drum[0].drumName\n    });\n\n    /* If Recording is on, clicking/pressing drums will push a new Date \n    and drum id to timeStamps array */\n    if (!this.state.recordStop) {\n      let totalTime = this.state.timeStamps;\n\n      totalTime[0].push(new Date());\n      totalTime[1].push(drum[0].keyPress);\n\n      this.setState({\n        timeStamps: totalTime\n      });\n    }\n  }\n\n  /* Changes text of Record button and sets initial and \n  final Date elements in timeStamp array, to be used to \n  determine playing sequence for the Play component */\n  handleRecordChange() {\n    let recordText;\n    let recordState = this.state.recordStop ? false : true;\n\n    if (this.state.recordStop) {\n      recordText = \"Stop\";\n    } else {\n      recordText = \"Record\";\n    }\n\n    if (this.state.recordStop) {\n      let newTime = [[new Date()], []];\n\n      this.setState({\n        timeStamps: newTime\n      });\n    } else {\n      let totalTime = this.state.timeStamps;\n      totalTime[0].push(new Date());\n\n      this.setState({\n        timeStamps: totalTime\n      });\n    }\n\n    this.setState({\n      recordStop: recordState,\n      recordText: recordText\n    });\n  }\n\n  render() {\n    /* Generate a series of DrumPad elements using the map method */\n    const drumList = drumPads.map(drumPad => (\n      <DrumPad\n        key={drumPad.keyPress}\n        letterKey={drumPad.keyPress}\n        audioSrc={drumPad.audioSrc}\n        onChange={this.handleKeyPress}\n        drumName={drumPad.drumName}\n        drumColor={drumPad.drumColor}\n      />\n    ));\n\n    return (\n      <div id=\"drum-machine\">\n        <Display drumPad={this.state.drumName} />\n        {drumList}\n        <Record\n          onChange={this.handleRecordChange}\n          recordText={this.state.recordText}\n        />\n        <Play timeStamps={this.state.timeStamps} onPlay={this.handleKeyPress} />\n        <Author />\n        <Modal />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}